{"version":3,"sources":["components/Zipcode.jsx","components/Current.jsx","components/Hour.jsx","components/Daily.jsx","components/Weather.jsx","components/Card.jsx","components/Header.jsx","components/Footer.jsx","components/App.js","index.js"],"names":["require","config","Zipcode","props","useState","inputZip","setInputZip","zipCodeUrl","process","showPosition","p","onAdd","lat","coords","latitude","lng","longitude","city","submitZip","className","onSubmit","e","preventDefault","fetch","then","res","ok","Promise","reject","json","data","catch","err","console","log","name","type","maxLength","placeholder","onChange","target","value","class","onClick","loadingCurrent","navigator","geolocation","getCurrentPosition","Current","sunrise","Date","sunriseTime","toLocaleTimeString","timeZone","timezone","hour12","hour","minute","sunset","sunsetTime","icon","state","day","month","date","year","src","alt","temperature","summary","feelsLike","precipProbability","uvIndex","humidity","dewPoint","pressure","visibility","Hour","hours","time","getUTCHours","precip","Daily","highTemp","temperatureHighTime","Math","round","temperatureHigh","temperatureLow","precipType","Weather","months","dayNames","geo","loadWeather","a","Error","statusText","promiseFn","isLoading","message","weather","theDate","currently","getDay","getMonth","getDate","getFullYear","apparentTemperature","daily","hourly","map","i","key","Card","locationLoaded","setLocationLoaded","currentLoading","setCurrentLoading","zip_code","setGeo","userLocation","Header","Footer","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.2c0a6389.chunk.js","sourcesContent":["import React, { useState } from 'react';\nrequire('dotenv').config()\n\n\nfunction Zipcode(props){\n    const [inputZip, setInputZip ] = useState(\"\");\n\n    const proxyUrl = 'https://cors-anywhere.herokuapp.com/';\n    const zipCodeUrl = `http://www.zipcodeapi.com/rest/${process.env.REACT_APP_ZIPCODE}/info.json/${inputZip}/degrees`;\n\n      function handleChange(e){\n        setInputZip(e.target.value);\n    }\n\n    //user submitted zipcode fetching lat and lng\n\n    function submitZip(e){\n        props.submitZip();\n        e.preventDefault();\n        fetch(proxyUrl + zipCodeUrl)\n        .then(res => (res.ok ? res : Promise.reject(res)))\n        .then(res => res.json())\n        .then(data => {\n            props.onAdd(data);\n        })\n        .catch(err => console.log(err))\n       setInputZip(\"\")\n\n    }\n    //geo coordinates fetch\n    function getCurrentLocation(){\n        props.loadingCurrent();\n        navigator.geolocation.getCurrentPosition(showPosition)\n    }\n\n\n    function showPosition(p){\n        props.onAdd({\n            lat: p.coords.latitude,\n            lng: p.coords.longitude,\n            city: \"your area\"\n        })\n        //sets location loaded to true on Card\n        props.submitZip();\n\n    }\n        \n\n    return(\n        <div className=\"zipcode\">\n        <form onSubmit={submitZip}>\n        <input \n            name=\"zipcode\"\n            type=\"text\"\n            maxLength=\"5\"\n            placeholder=\"Enter Zipcode\"\n            onChange={handleChange}\n            value = {inputZip}\n        />\n        <button type=\"submit\">Submit</button>\n        </form>\n        <button class=\"arrow fas fa-location-arrow\" onClick={getCurrentLocation}></button>\n        </div>\n\n    )\n}\n\nexport default Zipcode;","import React from 'react';\n\nfunction Current(props){\n    const sunrise = new Date(props.sunriseTime * 1000).toLocaleTimeString(\"en-US\", { timeZone: props.timezone, hour12: true, hour:'2-digit', minute:'2-digit' });;\n    const sunset = new Date(props.sunsetTime * 1000).toLocaleTimeString(\"en-US\", { timeZone: props.timezone, hour12: true, hour:'2-digit', minute:'2-digit' });\n\n    const icon = `images/${props.icon}.png`\n    return(\n        <div className=\"current card\">\n            <div className=\"currentSummary\">\n            <header>\n                <div><p>Weather for {props.city}, {props.state}</p>\n                <p>{props.day + \", \" + props.month + \" \" + props.date + \" \" + props.year}</p>\n                    </div>\n            </header>\n            <img src= {icon} className=\"icon\" alt={props.icon}></img>\n        <div className=\"summaryWrapper\">\n            <div className=\"temperature\">{props.temperature}&deg;</div>\n            <div>{props.summary}</div>\n            <div>Feels like: {props.feelsLike}&#176;</div>\n            <div className = \"current-set\">\n                <p>Sunrise: {sunrise}</p>\n                <p>Sunset: {sunset}</p>\n            </div>\n        </div>\n\n            </div>\n\n            <div className=\"rightNow\"> \n                <table>\n                    <caption>Currently</caption>\n                    <tbody>\n                    <tr>\n                        <th>Rain</th>\n                            <td>{props.precipProbability}%</td>\n                    </tr>\n                    <tr>\n                        <th>UV Index</th>\n                            <td>{props.uvIndex}</td>\n                    </tr>    \n                    <tr>\n                        <th>Humidity</th>\n                            <td>{props.humidity * 100}%</td>\n                    </tr>\n                    <tr>\n                        <th>Dew Point</th>\n                            <td>{props.dewPoint}&deg;</td>\n                    </tr>\n                    <tr>\n                        <th>Pressure</th>\n                            <td>{props.pressure} in</td>\n                    </tr>\n                    <tr>\n                        <th>Visibility</th>\n                            <td>{props.visibility} mi</td>\n                    </tr>\n\n                    </tbody>\n                </table>\n            </div>\n        </div>\n    )\n}\n\nexport default Current;","import React from 'react';\n\nfunction Hour(props){\n    const icon = `images/${props.icon}.png`\n    const hours = new Date(props.time * 1000).getUTCHours();\n    return (<div className=\"hour card\">\n        <div className=\"hour-time\">{hours === 0 ? \"12am\" : hours === 12 ? \"12pm\" : hours < 12? hours +\"am\" : hours - 12 + \"pm\"}</div>\n        <div>{props.precip}%</div>\n        <div className=\"hour-summary\">{props.summary}</div>\n        <img src= {icon} className=\"hour-icon\" alt={props.icon}></img>\n        </div>)\n}\n\nexport default Hour;","import React from 'react';\n\n\n\nfunction Daily(props){\n\n    const highTemp = new Date(props.temperatureHighTime * 1000).toLocaleTimeString(\"en-US\", { timeZone: props.timezone, hour12: true, hour:'2-digit', minute:'2-digit' });\n    const sunrise = new Date(props.sunriseTime * 1000).toLocaleTimeString(\"en-US\", { timeZone: props.timezone, hour12: true, hour:'2-digit', minute:'2-digit' });;\n    const sunset = new Date(props.sunsetTime * 1000).toLocaleTimeString(\"en-US\", { timeZone: props.timezone, hour12: true, hour:'2-digit', minute:'2-digit' });\n    // this isn't working from darkSky currently.... {props.precipType.charAt(0).toUpperCase() + props.precipType.slice(1)}\n    return(\n        <div className=\"daily-card\">\n        <p className=\"daily-day\">{props.time} </p>\n        <p>{props.summary}</p>\n        <p>High of {Math.round(props.temperatureHigh)} around {highTemp}</p>\n        <p>Low of {Math.round(props.temperatureLow)}</p>\n        <p>{props.precipType} probability {Math.round(props.precipProbability * 100)}%</p>\n        <p>Sunrise: {sunrise}</p>\n        <p>Sunset: {sunset}</p>\n        <hr />\n        </div>\n    )\n}\n\nexport default Daily;","import React from 'react';\nimport Current from './Current'\nimport Hour from './Hour';\nimport Daily from './Daily';\nimport Async from 'react-async';\nimport test from '../test.json';\nrequire('dotenv').config()\n\n\nfunction Weather(props) {\n\n\n  const months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"]\n  const dayNames = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\n  const geo = props.geo;\n\n  /// testing area /////////////////////////////\n\n  // const weather = test[0];\n  // const current ={\n  //   lat: 42.293657599999996,\n  //   lng: -71.4440704\n  // }\n\n\n\n//////// API REQUESTS /////////////////////////////////////\n\n  const proxyUrl = 'https://cors-anywhere.herokuapp.com/';\n\n  const loadWeather = async() => {\n   const res = await fetch(proxyUrl + `https://api.darksky.net/forecast/${process.env.REACT_APP_DARK_SKY}/${geo.lat},${geo.lng}`)\n   if (!res.ok) throw new Error(res.statusText)\n   return res.json()\n \n    ;\n    }\n  \n\n\n\n///////////RETURN\n\nreturn ( \n<div >\n  <Async promiseFn={loadWeather} >\n\n      {({data, err, isLoading}) => {\n\n        if (isLoading) return \"Loading weather...\"\n        if (err) return `Something went wrong: ${err.message}`\n        \n        if (data) {\n          const weather = data;\n          const theDate = new Date(weather.currently.time * 1000)\n          console.log(data)\n          \n        return ( \n        <div >\n            <Current \n            day = {dayNames[theDate.getDay()]}\n            month = {months[theDate.getMonth()]}\n            date = {theDate.getDate()}\n            year = {theDate.getFullYear()}\n            city = {geo.city}\n            state = {geo.state}\n            feelsLike = {Math.round(weather.currently.apparentTemperature)}\n            temperature = {Math.round(weather.currently.temperature)}\n            precipProbability = {weather.currently.precipProbability}\n            dewPoint = {weather.currently.dewPoint}\n            uvIndex = {weather.currently.uvIndex}\n            summary = {weather.currently.summary}\n            humidity = {weather.currently.humidity}\n            pressure ={weather.currently.pressure}\n            visibility = {weather.currently.visibility}\n            icon = {weather.currently.icon}\n            sunriseTime = {weather.daily.data[0].sunriseTime}\n            sunsetTime = {weather.daily.data[0].sunsetTime}\n            timezone = {weather.timezone}\n            />\n\n\n          <div className = \"upcomingHours\" >\n               <p className=\"hour-main-summary\"> Todays outlook: {weather.hourly.summary}</p>\n              <div className = \"hours card\" > \n                {weather.hourly.data.map((hour, i) => {\n                  return ( \n                    <div >\n                    <Hour key = {i}\n                    time = {hour.time}\n                    summary = {hour.summary}\n                    precip = {hour.precipProbability}\n                    icon = {hour.icon}\n                    /> \n                    </div>\n                    )\n                  })\n                } \n              </div> \n            </div>\n          \n            <div className = \"upcomingWeek\" >\n              <br></br>\n             Upcoming for the week: {weather.daily.summary}\n             <br></br>\n               <div > \n                {weather.daily.data.map((day, i) => {\n                return ( \n                  <div >\n                  <Daily \n                  key = {i}\n                  precipType = {day.precipType}\n                  precipProbability = {day.precipProbability}\n                  time = {dayNames[new Date(day.time * 1000).getDay()]}\n                  timezone = {weather.timezone}\n                  summary = {day.summary}\n                  temperatureHigh = {day.temperatureHigh}\n                  temperatureHighTime = {day.temperatureHighTime}\n                  temperatureLow = {day.temperatureLow}\n                  sunriseTime = {day.sunriseTime}\n                  sunsetTime = {day.sunsetTime}\n                  /> \n                  </div>\n                  )\n                  })\n                } \n                </div>\n            </div> \n        </div>\n          )\n        }\n      }\n    \n    }\n    </Async>\n</div>)\n}\n\nexport default Weather;\n","import React, { useState } from 'react';\nimport Zipcode from './Zipcode';\nimport Weather from './Weather';\n  \nfunction Card(props){\n    const [locationLoaded, setLocationLoaded] = useState(null);\n    const [currentLoading, setCurrentLoading] = useState(null);\n    const  [geo, setGeo] = useState({\n        city: 'default',\n        state: 'default',\n        zip_code: 'default',\n        lat: 'default',\n        lng: 'default'\n      });\n    \n    \n    function loadingCurrent(){\n        setCurrentLoading(true);\n    }\n    function submitZip(){\n        setLocationLoaded(true);\n    }\n\n    function userLocation(data){\n       setGeo( {\n        city: data.city,\n        state: data.state,\n        zip_code: data.zip_code,\n        lat: data.lat,\n        lng: data.lng,\n    })\n    }\n\n    return(\n        <div>\n        <Zipcode \n            onAdd={userLocation}\n            submitZip={submitZip}\n            loadingCurrent={loadingCurrent}\n            />\n\n        <div className=\"content\">\n            {!locationLoaded? <div>{!currentLoading? \"Let's see what's happening in your neck of the woods...\" : \"Getting location, please wait...\"}</div>\n            :\n            <Weather geo={geo} onAdd={userLocation}/>\n\n            }\n    </div>\n\n        </div>\n    )\n\n}\n\nexport default Card;","import React from 'react';\n\nfunction Header(){\n    return(\n    <header>\n        <h1>Here's Tom with the Weather. </h1>\n    </header>\n\n    )\n}\n\nexport default Header;","import React from 'react';\n\nfunction Footer(props){\n\n    return(\n      <footer>\n          <p>ⓒ {new Date().getFullYear()} Ian made this</p>\n      </footer>\n    )\n}\n\nexport default Footer;","import React from 'react';\nimport Card from './Card';\nimport Header from './Header';\nimport Footer from './Footer';\nrequire('dotenv').config()\n\nfunction App() {\n  \n  return (\n    <div>\n      <Header />\n      <Card/>\n      <Footer />\n    </div>\n  )}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\n\n\n// import App from './tests';\n\nReactDOM.render(<App />, document.getElementById(\"root\"));"],"sourceRoot":""}